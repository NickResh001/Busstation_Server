// <auto-generated />
using System;
using ASP_busstation.Models1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASP_busstation.Migrations
{
    [DbContext(typeof(AspbusstationContext))]
    [Migration("20230331150750_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ASPNetCoreApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.BusRoute", b =>
                {
                    b.Property<int>("BusRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusRouteId"));

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<double>("PriceCoef")
                        .HasColumnType("float");

                    b.HasKey("BusRouteId");

                    b.ToTable("BusRoute", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.BusShelter", b =>
                {
                    b.Property<int>("BusShelterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusShelterId"));

                    b.Property<int>("BusRouteFk")
                        .HasColumnType("int")
                        .HasColumnName("BusRouteFK");

                    b.Property<double>("RouteShare")
                        .HasColumnType("float");

                    b.Property<int>("SeqNumber")
                        .HasColumnType("int");

                    b.Property<int>("SettlementFk")
                        .HasColumnType("int")
                        .HasColumnName("SettlementFK");

                    b.HasKey("BusShelterId");

                    b.HasIndex("BusRouteFk");

                    b.HasIndex("SettlementFk");

                    b.ToTable("BusShelter", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FIO");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DriverId");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RegionId");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Settlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementId"));

                    b.Property<int>("RegionFk")
                        .HasColumnType("int")
                        .HasColumnName("RegionFK");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SettlementId");

                    b.HasIndex("RegionFk");

                    b.ToTable("Settlement", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("PassengerPassport")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("UserFk")
                        .HasColumnType("int")
                        .HasColumnName("UserFK");

                    b.Property<int?>("VoyageFk")
                        .HasColumnType("int")
                        .HasColumnName("VoyageFK");

                    b.HasKey("TicketId");

                    b.HasIndex("VoyageFk");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportId"));

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int>("TransportBrandFk")
                        .HasColumnType("int")
                        .HasColumnName("TransportBrandFK");

                    b.Property<int?>("TransportCategoryFk")
                        .HasColumnType("int")
                        .HasColumnName("TransportCategoryFK");

                    b.HasKey("TransportId");

                    b.HasIndex("TransportBrandFk");

                    b.HasIndex("TransportCategoryFk");

                    b.ToTable("Transport", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.TransportBrand", b =>
                {
                    b.Property<int>("TransportBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportBrandId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransportBrandId");

                    b.ToTable("TransportBrand", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.TransportCategory", b =>
                {
                    b.Property<int>("TransportCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportCategoryId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransportCategoryId");

                    b.ToTable("TransportCategory", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.Voyage", b =>
                {
                    b.Property<int>("VoyageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoyageId"));

                    b.Property<DateTime>("AllowTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("DriverFk")
                        .HasColumnType("int")
                        .HasColumnName("DriverFK");

                    b.Property<string>("DriverPassport")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<int?>("RouteFk")
                        .HasColumnType("int")
                        .HasColumnName("RouteFK");

                    b.Property<int?>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<int?>("TransportFk")
                        .HasColumnType("int")
                        .HasColumnName("TransportFK");

                    b.Property<int?>("VoyageStatusFk")
                        .HasColumnType("int")
                        .HasColumnName("VoyageStatusFK");

                    b.HasKey("VoyageId");

                    b.HasIndex("DriverFk");

                    b.HasIndex("RouteFk");

                    b.HasIndex("TransportFk");

                    b.HasIndex("VoyageStatusFk");

                    b.ToTable("Voyage", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.VoyageStatus", b =>
                {
                    b.Property<int>("VoyageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoyageStatusId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VoyageStatusId");

                    b.ToTable("VoyageStatus", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASP_busstation.Models1.BusShelter", b =>
                {
                    b.HasOne("ASP_busstation.Models1.BusRoute", "BusRouteFkNavigation")
                        .WithMany("BusShelters")
                        .HasForeignKey("BusRouteFk")
                        .IsRequired()
                        .HasConstraintName("FK_BusShelter_BusRoute");

                    b.HasOne("ASP_busstation.Models1.Settlement", "SettlementFkNavigation")
                        .WithMany("BusShelters")
                        .HasForeignKey("SettlementFk")
                        .IsRequired()
                        .HasConstraintName("FK_BusShelter_Settlement");

                    b.Navigation("BusRouteFkNavigation");

                    b.Navigation("SettlementFkNavigation");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Settlement", b =>
                {
                    b.HasOne("ASP_busstation.Models1.Region", "RegionFkNavigation")
                        .WithMany("Settlements")
                        .HasForeignKey("RegionFk")
                        .IsRequired()
                        .HasConstraintName("FK_Settlement_Region");

                    b.Navigation("RegionFkNavigation");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Ticket", b =>
                {
                    b.HasOne("ASP_busstation.Models1.Voyage", "VoyageFkNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("VoyageFk")
                        .HasConstraintName("FK_Ticket_Voyage");

                    b.Navigation("VoyageFkNavigation");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Transport", b =>
                {
                    b.HasOne("ASP_busstation.Models1.TransportBrand", "TransportBrandFkNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("TransportBrandFk")
                        .IsRequired()
                        .HasConstraintName("FK_Transport_TransportBrand");

                    b.HasOne("ASP_busstation.Models1.TransportCategory", "TransportCategoryFkNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("TransportCategoryFk")
                        .HasConstraintName("FK_Transport_TransportCategory");

                    b.Navigation("TransportBrandFkNavigation");

                    b.Navigation("TransportCategoryFkNavigation");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Voyage", b =>
                {
                    b.HasOne("ASP_busstation.Models1.Driver", "DriverFkNavigation")
                        .WithMany("Voyages")
                        .HasForeignKey("DriverFk")
                        .HasConstraintName("FK_Voyage_Driver");

                    b.HasOne("ASP_busstation.Models1.BusRoute", "RouteFkNavigation")
                        .WithMany("Voyages")
                        .HasForeignKey("RouteFk")
                        .HasConstraintName("FK_Voyage_BusRoute");

                    b.HasOne("ASP_busstation.Models1.Transport", "TransportFkNavigation")
                        .WithMany("Voyages")
                        .HasForeignKey("TransportFk")
                        .HasConstraintName("FK_Voyage_Transport");

                    b.HasOne("ASP_busstation.Models1.VoyageStatus", "VoyageStatusFkNavigation")
                        .WithMany("Voyages")
                        .HasForeignKey("VoyageStatusFk")
                        .HasConstraintName("FK_Voyage_VoyageStatus");

                    b.Navigation("DriverFkNavigation");

                    b.Navigation("RouteFkNavigation");

                    b.Navigation("TransportFkNavigation");

                    b.Navigation("VoyageStatusFkNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASPNetCoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASPNetCoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNetCoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASPNetCoreApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP_busstation.Models1.BusRoute", b =>
                {
                    b.Navigation("BusShelters");

                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Driver", b =>
                {
                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Region", b =>
                {
                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Settlement", b =>
                {
                    b.Navigation("BusShelters");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Transport", b =>
                {
                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("ASP_busstation.Models1.TransportBrand", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("ASP_busstation.Models1.TransportCategory", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("ASP_busstation.Models1.Voyage", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ASP_busstation.Models1.VoyageStatus", b =>
                {
                    b.Navigation("Voyages");
                });
#pragma warning restore 612, 618
        }
    }
}
